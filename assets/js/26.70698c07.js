(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{206:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"扩展-string-的插值功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展-string-的插值功能"}},[t._v("#")]),t._v(" 扩展 String 的插值功能")]),t._v(" "),n("p",[t._v("在 Swift 中我们一般通过  "),n("code",[t._v("\\(Any)")]),t._v("  的方式在 String 中插值，而在 Swift 5 中我们可以通过扩展  "),n("code",[t._v("String.StringInterpolation")]),t._v("  并实现带有不同参数的  "),n("code",[t._v("appendInterpolation")]),t._v("  方法来增强这一功能，这里以格式化输出时间为例")]),t._v(" "),n("h3",{attrs:{id:"原始输出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原始输出"}},[t._v("#")]),t._v(" 原始输出")]),t._v(" "),n("tabs",{attrs:{"cache-lifetime":"10",options:{useUrlFragment:!1}}},[n("tab",{attrs:{name:"Swift"}},[n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\(Date())"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])])]),t._v(" "),n("tab",{attrs:{name:"输出"}},[n("p",[t._v("2020-03-18 07:15:51 +0000")])])],1),t._v(" "),n("h3",{attrs:{id:"格式化增强"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式化增强"}},[t._v("#")]),t._v(" 格式化增强")]),t._v(" "),n("tabs",{attrs:{"cache-lifetime":"10",options:{useUrlFragment:!1}}},[n("tab",{attrs:{name:"Swift"}},[n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 扩展 String.StringInterpolation")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("StringInterpolation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 实现 appendInterpolation")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 此处入参为 Date 类型，只对 Date 类型有效")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutating")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendInterpolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Date")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" formatter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DateFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        formatter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dateFormat "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yyyy-MM-dd HH:mm"')]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendLiteral")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("formatter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 可以带有多个参数")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mutating")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendInterpolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Date")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" formatterStr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" formatter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("DateFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        formatter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dateFormat "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" formatterStr\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendLiteral")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("formatter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("from"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\(Date())"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\(Date(), formatterStr:  "')]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HH")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("mm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("ss"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('")"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])])]),t._v(" "),n("tab",{attrs:{name:"输出"}},[n("p",[t._v("2020-03-18 15:20\n15:20:18")])])],1),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),n("p",[t._v("通过在扩展中实现多个不同的  "),n("code",[t._v("appendInterpolation")]),t._v("  方法，我们就可以实现对不同数据进行格式化输出，方法中的  "),n("code",[t._v("appendLiteral")]),t._v("  将最终处理的结果添加到原始字符串上，如果遗漏则会变成插入空字符串")])]),t._v(" "),n("h2",{attrs:{id:"扩展自定义类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展自定义类型"}},[t._v("#")]),t._v(" 扩展自定义类型")]),t._v(" "),n("p",[t._v("实际上我们不止可以扩展原始的  "),n("code",[t._v("String")]),t._v(" , 通过遵循  "),n("code",[t._v("ExpressibleByStringLiteral")]),t._v("  与  "),n("code",[t._v("ExpressibleByStringInterpolation")]),t._v("  协议可以让自定义的类型具备通过字符串初始化并插值的功能")]),t._v(" "),n("h3",{attrs:{id:"创建自定义类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建自定义类型"}},[t._v("#")]),t._v(" 创建自定义类型")]),t._v(" "),n("p",[t._v("首先我们创建一个用来进行扩展的类型，例如构建一个可以通过插值方式生成属性字符串的新类型  "),n("code",[t._v("AttributedString")])]),t._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 创建一个用来测试的类型，里面仅有一个属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("AttributedString")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("NSAttributedString")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br")])]),n("p",[t._v("现在  "),n("code",[t._v("AttributedString")]),t._v("  只是一个普通的结构体，接下来我们让它可以通过字符串初始化")]),t._v(" "),n("h3",{attrs:{id:"遵循-expressiblebystringliteral-协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遵循-expressiblebystringliteral-协议"}},[t._v("#")]),t._v(" 遵循  "),n("code",[t._v("ExpressibleByStringLiteral")]),t._v("  协议")]),t._v(" "),n("p",[t._v("首先我们通过扩展方法遵循  "),n("code",[t._v("ExpressibleByStringLiteral")]),t._v("  协议并实现  "),n("code",[t._v("ExpressibleByStringLiteral")]),t._v("  协议中的初始化方法  "),n("code",[t._v("init(stringLiteral: String)")]),t._v(" ，当我们自定义类在通过没有插值的字符串初始化时会执行这个方法来初始化")]),t._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 实现协议并实现其中的初始化方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("AttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ExpressibleByStringLiteral")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 没有插值的字符串会执行这个方法初始化")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringLiteral"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        attributedString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSAttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stringLiteral"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h3",{attrs:{id:"遵循-expressiblebystringinterpolation-协议"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#遵循-expressiblebystringinterpolation-协议"}},[t._v("#")]),t._v(" 遵循  "),n("code",[t._v("ExpressibleByStringInterpolation")]),t._v("  协议")]),t._v(" "),n("p",[t._v("遵循  "),n("code",[t._v("ExpressibleByStringInterpolation")]),t._v("  协议需要我们实现其初始化方法  "),n("code",[t._v("init(stringInterpolation: StringInterpolation)")]),t._v(" ，当使用带有插值的字符串初始化时会执行这个方法来初始化。同时我们还要添加一个类型为  "),n("code",[t._v("StringInterpolation")]),t._v("  的子类型并让其遵循  "),n("code",[t._v("StringInterpolationProtocol")]),t._v("  协议，这个类型用来对插值进行处理，初始化方法的参数就是这个类型")]),t._v(" "),n("p",[t._v("在  "),n("code",[t._v("StringInterpolation")]),t._v("  子类型中我们需要实现其初始化方法  "),n("code",[t._v("init(literalCapacity: Int, interpolationCount: Int)")]),t._v("  在这里可以进行初始化等操作，实现方法  "),n("code",[t._v("appendLiteral(_ literal:String)")]),t._v(" , 这个方法用来处理初始化字符串中非插值的部分，同时实现一个或多个不同的  "),n("code",[t._v("appendInterpolation")]),t._v("  方法，这个方法就如同上面扩展 Stirng 一样用来对不同类型的插值进行处理")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",[t._v("在利用带有插值的字符串初始化时，会首先调用  "),n("code",[t._v("StringInterpolation")]),t._v("  子类型中的初始化方法，然后按字符串顺序依次解析，根据是否是插值以及插值的类型来调用  "),n("code",[t._v("appendLiteral")]),t._v("  和  "),n("code",[t._v("appendInterpolation")]),t._v("  方法，最后调用  "),n("code",[t._v("init(stringInterpolation: StringInterpolation)")]),t._v("  构建完成")])]),t._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 实现协议并实现其中的方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extension")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("AttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("ExpressibleByStringInterpolation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// `StringInterpolation` 子类型，用来处理插值")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("StringInterpolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("StringInterpolationProtocol")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 这里创建可变属性字符串组成最后的结果")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("NSMutableAttributedString")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 实现初始化方法")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("literalCapacity"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" interpolationCount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            attributedString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSMutableAttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 实现 `appendLiteral` 方法,当遇到非插值部分时会调用该方法进行组合")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendLiteral")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" literal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 把不是插值部分的字符串拼接到结果上")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 此处可以对非插值部分进行处理")]),t._v("\n            attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSAttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" literal"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        \n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 实现 `appendInterpolation` 方法,当遇到插值部分时会调用该方法进行处理")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 可以实现多个来对不同类型的插值进行处理")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendInterpolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("_")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 添加插值部分到结果上")]),t._v("\n            attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSAttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 插值字符串会执行该初始化方法")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("init")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringInterpolation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("StringInterpolation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        attributedString "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("NSAttributedString")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" stringInterpolation"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br")])]),n("h3",{attrs:{id:"使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用"}},[t._v("#")]),t._v(" 使用")]),t._v(" "),n("p",[t._v("通过上面的几个步骤我们构建了一个简单的结构体类型  "),n("code",[t._v("AttributedString")]),t._v(" , 这个类型可以通过插值字符串初始化并可以返回一个属性字符串")]),t._v(" "),n("div",{staticClass:"language-swift line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-swift"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("AttributedString")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试'),n("span",{pre:!0,attrs:{class:"token interpolation"}},[n("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v("\\(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"插入一个值"')]),n("span",{pre:!0,attrs:{class:"token delimiter variable"}},[t._v(")")])]),t._v('"')]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attributedString"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br")])]),n("p",[t._v("通过添加更多的  "),n("code",[t._v("appendInterpolation")]),t._v("  方法可以处理更多不同类型的插值")])],1)}),[],!1,null,null,null);s.default=e.exports}}]);